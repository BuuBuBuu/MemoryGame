// Generated by view binder compiler. Do not edit!
package com.example.memorygamedec22.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.FrameLayout;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ProgressBar;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.memorygamedec22.R;
import com.google.android.material.button.MaterialButton;
import com.google.android.material.progressindicator.LinearProgressIndicator;
import com.google.android.material.textfield.TextInputEditText;
import com.google.android.material.textfield.TextInputLayout;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityFetchBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final FrameLayout adContainer;

  @NonNull
  public final ImageView adImageView;

  @NonNull
  public final ProgressBar adProgressBar;

  @NonNull
  public final MaterialButton btnClearAll;

  @NonNull
  public final MaterialButton btnFetch;

  @NonNull
  public final ImageButton btnLeft;

  @NonNull
  public final MaterialButton btnLoginLogout;

  @NonNull
  public final MaterialButton btnStartGame;

  @NonNull
  public final LinearLayout buttonContainer;

  @NonNull
  public final TextInputEditText etUrl;

  @NonNull
  public final LinearProgressIndicator progressBar;

  @NonNull
  public final LinearLayout progressContainer;

  @NonNull
  public final RecyclerView rvImages;

  @NonNull
  public final TextInputLayout tilUrl;

  @NonNull
  public final LinearLayout topBar;

  @NonNull
  public final TextView tvDownloadStatus;

  @NonNull
  public final TextView tvWelcome;

  private ActivityFetchBinding(@NonNull LinearLayout rootView, @NonNull FrameLayout adContainer,
      @NonNull ImageView adImageView, @NonNull ProgressBar adProgressBar,
      @NonNull MaterialButton btnClearAll, @NonNull MaterialButton btnFetch,
      @NonNull ImageButton btnLeft, @NonNull MaterialButton btnLoginLogout,
      @NonNull MaterialButton btnStartGame, @NonNull LinearLayout buttonContainer,
      @NonNull TextInputEditText etUrl, @NonNull LinearProgressIndicator progressBar,
      @NonNull LinearLayout progressContainer, @NonNull RecyclerView rvImages,
      @NonNull TextInputLayout tilUrl, @NonNull LinearLayout topBar,
      @NonNull TextView tvDownloadStatus, @NonNull TextView tvWelcome) {
    this.rootView = rootView;
    this.adContainer = adContainer;
    this.adImageView = adImageView;
    this.adProgressBar = adProgressBar;
    this.btnClearAll = btnClearAll;
    this.btnFetch = btnFetch;
    this.btnLeft = btnLeft;
    this.btnLoginLogout = btnLoginLogout;
    this.btnStartGame = btnStartGame;
    this.buttonContainer = buttonContainer;
    this.etUrl = etUrl;
    this.progressBar = progressBar;
    this.progressContainer = progressContainer;
    this.rvImages = rvImages;
    this.tilUrl = tilUrl;
    this.topBar = topBar;
    this.tvDownloadStatus = tvDownloadStatus;
    this.tvWelcome = tvWelcome;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityFetchBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityFetchBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_fetch, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityFetchBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.adContainer;
      FrameLayout adContainer = ViewBindings.findChildViewById(rootView, id);
      if (adContainer == null) {
        break missingId;
      }

      id = R.id.adImageView;
      ImageView adImageView = ViewBindings.findChildViewById(rootView, id);
      if (adImageView == null) {
        break missingId;
      }

      id = R.id.adProgressBar;
      ProgressBar adProgressBar = ViewBindings.findChildViewById(rootView, id);
      if (adProgressBar == null) {
        break missingId;
      }

      id = R.id.btnClearAll;
      MaterialButton btnClearAll = ViewBindings.findChildViewById(rootView, id);
      if (btnClearAll == null) {
        break missingId;
      }

      id = R.id.btnFetch;
      MaterialButton btnFetch = ViewBindings.findChildViewById(rootView, id);
      if (btnFetch == null) {
        break missingId;
      }

      id = R.id.btnLeft;
      ImageButton btnLeft = ViewBindings.findChildViewById(rootView, id);
      if (btnLeft == null) {
        break missingId;
      }

      id = R.id.btnLoginLogout;
      MaterialButton btnLoginLogout = ViewBindings.findChildViewById(rootView, id);
      if (btnLoginLogout == null) {
        break missingId;
      }

      id = R.id.btnStartGame;
      MaterialButton btnStartGame = ViewBindings.findChildViewById(rootView, id);
      if (btnStartGame == null) {
        break missingId;
      }

      id = R.id.buttonContainer;
      LinearLayout buttonContainer = ViewBindings.findChildViewById(rootView, id);
      if (buttonContainer == null) {
        break missingId;
      }

      id = R.id.etUrl;
      TextInputEditText etUrl = ViewBindings.findChildViewById(rootView, id);
      if (etUrl == null) {
        break missingId;
      }

      id = R.id.progressBar;
      LinearProgressIndicator progressBar = ViewBindings.findChildViewById(rootView, id);
      if (progressBar == null) {
        break missingId;
      }

      id = R.id.progressContainer;
      LinearLayout progressContainer = ViewBindings.findChildViewById(rootView, id);
      if (progressContainer == null) {
        break missingId;
      }

      id = R.id.rvImages;
      RecyclerView rvImages = ViewBindings.findChildViewById(rootView, id);
      if (rvImages == null) {
        break missingId;
      }

      id = R.id.tilUrl;
      TextInputLayout tilUrl = ViewBindings.findChildViewById(rootView, id);
      if (tilUrl == null) {
        break missingId;
      }

      id = R.id.topBar;
      LinearLayout topBar = ViewBindings.findChildViewById(rootView, id);
      if (topBar == null) {
        break missingId;
      }

      id = R.id.tvDownloadStatus;
      TextView tvDownloadStatus = ViewBindings.findChildViewById(rootView, id);
      if (tvDownloadStatus == null) {
        break missingId;
      }

      id = R.id.tvWelcome;
      TextView tvWelcome = ViewBindings.findChildViewById(rootView, id);
      if (tvWelcome == null) {
        break missingId;
      }

      return new ActivityFetchBinding((LinearLayout) rootView, adContainer, adImageView,
          adProgressBar, btnClearAll, btnFetch, btnLeft, btnLoginLogout, btnStartGame,
          buttonContainer, etUrl, progressBar, progressContainer, rvImages, tilUrl, topBar,
          tvDownloadStatus, tvWelcome);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
